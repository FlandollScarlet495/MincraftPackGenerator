# Minecraft Pack Generator - 配布ガイド

## 📦 配布パッケージの作成

### 1. 完全配布パッケージの作成（推奨）
```bash
complete_distribution.bat
```
このコマンドで以下が自動実行されます：
- 配布パッケージの作成
- 品質チェックの実行
- 最終確認

### 2. 個別実行
```bash
# 配布パッケージの作成
create_distribution.bat

# 品質チェックの実行
check_distribution.bat
```

## 📁 作成されるファイル

### メインパッケージ
- `MinecraftPackGenerator_v1.0.0_YYYYMMDD.zip` - 配布用ZIPパッケージ

### 品質保証ファイル
- `MinecraftPackGenerator_v1.0.0_YYYYMMDD_checksums.txt` - チェックサムファイル
- `distribution_manifest.json` - ファイルマニフェスト

### 展開されたファイル
- `distribution/MinecraftPackGenerator/` - 配布用ディレクトリ

## 🎯 推奨配布サイト

### 1. GitHub Releases
- 無料で利用可能
- バージョン管理が簡単
- ダウンロード統計が確認可能

### 2. itch.io
- ゲーム開発者向けプラットフォーム
- 無料・有料配布が可能
- コミュニティ機能が充実

### 3. CurseForge
- Minecraft専用プラットフォーム
- 大きなコミュニティ
- 自動アップデート機能

### 4. Planet Minecraft
- Minecraft専用プラットフォーム
- 詳細なレビューシステム
- プレビュー機能

## 📋 配布時のチェックリスト

### 事前準備
- [ ] パッケージの動作確認
- [ ] 複数環境でのテスト
- [ ] ドキュメントの最終確認
- [ ] ウイルススキャンの実行

### 配布ファイル
- [ ] メインZIPパッケージ
- [ ] チェックサムファイル
- [ ] READMEファイル
- [ ] ライセンスファイル（必要に応じて）

### 配布サイト設定
- [ ] プロジェクト説明の作成
- [ ] スクリーンショットの準備
- [ ] タグ・カテゴリの設定
- [ ] バージョン情報の記載

## 📖 配布サイト別ガイド

### GitHub Releases
1. GitHubリポジトリを作成
2. Releasesページで新しいリリースを作成
3. タグ名を設定（例：v1.0.0）
4. リリースタイトルを設定
5. リリースノートを記載
6. ZIPファイルをアップロード
7. チェックサムファイルもアップロード

### itch.io
1. アカウントを作成
2. 新しいプロジェクトを作成
3. プロジェクト情報を設定
4. ファイルをアップロード
5. 価格設定（無料/有料）
6. タグ・カテゴリを設定
7. プレビュー画像を追加

### CurseForge
1. CurseForgeアカウントを作成
2. 新しいプロジェクトを作成
3. プロジェクト情報を入力
4. ファイルをアップロード
5. スクリーンショットを追加
6. 説明文を記載
7. カテゴリを選択

## 🔧 配布後の管理

### バージョン管理
- セマンティックバージョニングを使用
- 変更履歴を記録
- 後方互換性を考慮

### ユーザーサポート
- 問題報告の受け入れ
- FAQの作成
- トラブルシューティングガイド

### アップデート
- 定期的な機能追加
- バグ修正の迅速な対応
- ユーザーフィードバックの反映

## 📊 配布統計の追跡

### ダウンロード数
- 各配布サイトの統計を確認
- 人気の時期を分析
- ユーザー層を把握

### フィードバック
- レビュー・コメントの確認
- 改善点の特定
- ユーザー要望の収集

## 🛡️ セキュリティ対策

### ファイル検証
- チェックサムの提供
- デジタル署名の検討
- ウイルススキャンの定期実行

### 配布サイトの選択
- 信頼できるサイトを選択
- セキュリティ機能を確認
- バックアップ配布先の確保

## 📞 サポート体制

### ドキュメント
- インストールガイド
- 使用方法ガイド
- トラブルシューティング

### コミュニティ
- フォーラム・ディスカッション
- ソーシャルメディア
- メールサポート

## 🎉 配布成功のポイント

1. **品質の確保**
   - 十分なテストの実施
   - エラーハンドリングの充実
   - ユーザビリティの向上

2. **ドキュメントの充実**
   - 分かりやすい説明
   - スクリーンショットの活用
   - サンプルの提供

3. **コミュニティの構築**
   - ユーザーフィードバックの収集
   - 定期的なアップデート
   - 積極的なサポート

4. **継続的な改善**
   - 新機能の追加
   - パフォーマンスの向上
   - セキュリティの強化

---

このガイドに従って、安全で効果的な配布を行ってください！ 